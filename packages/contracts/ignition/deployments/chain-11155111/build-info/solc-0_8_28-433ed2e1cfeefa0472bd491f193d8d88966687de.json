{
  "_format": "hh3-sol-build-info-1",
  "id": "solc-0_8_28-433ed2e1cfeefa0472bd491f193d8d88966687de",
  "solcVersion": "0.8.28",
  "solcLongVersion": "0.8.28+commit.7893614a",
  "userSourceNameMap": {
    "contracts/ProofOfMe.sol": "project/contracts/ProofOfMe.sol"
  },
  "input": {
    "language": "Solidity",
    "settings": {
      "evmVersion": "cancun",
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "outputSelection": {
        "*": {
          "": [
            "ast"
          ],
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ]
        }
      },
      "remappings": []
    },
    "sources": {
      "project/contracts/ProofOfMe.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\ninterface IENS {\n    function resolver(bytes32 node) external view returns (address);\n\n    function owner(bytes32 node) external view returns (address);\n\n    function setSubnodeOwner(\n        bytes32 node,\n        bytes32 label,\n        address owner\n    ) external returns (bytes32);\n}\n\ninterface IENSResolver {\n    function setText(\n        bytes32 node,\n        string calldata key,\n        string calldata value\n    ) external;\n\n    function text(\n        bytes32 node,\n        string calldata key\n    ) external view returns (string memory);\n}\n\ncontract ProofOfMe {\n    // ENS registry on mainnet\n    IENS public constant ENS_REGISTRY =\n        IENS(0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e);\n\n    // ProofOfMe text record key\n    string public constant PROOFOFME_KEY = \"proofofme:registry\";\n\n    // Parent domain for subdomains (e.g., durin.eth)\n    bytes32 public immutable PARENT_NODE;\n    string public PARENT_DOMAIN;\n    address public owner;\n\n    // DID Registry\n    mapping(bytes32 => address) public ethOwnerOf; // DID hash => Ethereum address\n    mapping(bytes32 => bool) public isRegistered; // DID hash => registered status\n\n    // Credential types mapped by subdomain\n    struct Credential {\n        address issuer;\n        string description;\n        string subdomain; // The subdomain for this credential type\n        bool exists;\n    }\n    mapping(string => Credential) public credentials; // credentialType => Credential\n    mapping(string => string) public subdomainToCredentialType; // subdomain => credentialType\n\n    // Claims: DID hash => credential type => latest CID\n    mapping(bytes32 => mapping(string => string)) public latestClaim;\n\n    // Events\n    event DIDRegistered(\n        bytes32 indexed didHash,\n        string did,\n        address indexed ethOwner\n    );\n    event ClaimIssued(\n        bytes32 indexed didHash,\n        string did,\n        string cid,\n        string credentialType,\n        address indexed submitter\n    );\n    event CredentialTypeCreated(\n        string indexed credentialType,\n        string subdomain,\n        address indexed issuer,\n        string description\n    );\n    event SubdomainCreated(\n        bytes32 indexed node,\n        string subdomain,\n        address indexed issuer\n    );\n\n    // Errors\n    error Unauthorized();\n    error EmptyCID();\n    error EmptyDID();\n    error EmptyCredentialType();\n    error EmptySubdomain();\n    error DIDNotRegistered();\n    error DIDAlreadyRegistered();\n    error CredentialTypeNotExists();\n    error CredentialTypeAlreadyExists();\n    error SubdomainAlreadyExists();\n    error ResolverNotFound(bytes32 node);\n\n    constructor(bytes32 _parentNode, string memory _parentDomain) {\n        PARENT_NODE = _parentNode;\n        PARENT_DOMAIN = _parentDomain;\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner() {\n        if (msg.sender != owner) revert Unauthorized();\n        _;\n    }\n\n    /// @dev Helper: compute DID hash\n    function didHash(string calldata did) public pure returns (bytes32) {\n        return keccak256(abi.encodePacked(did));\n    }\n\n    /// @notice Create a credential type with subdomain (only issuers)\n    function createCredentialWithSubdomain(\n        string calldata credentialType,\n        string calldata subdomain,\n        string calldata description\n    ) external {\n        if (bytes(credentialType).length == 0) revert EmptyCredentialType();\n        if (bytes(subdomain).length == 0) revert EmptySubdomain();\n        if (credentials[credentialType].exists)\n            revert CredentialTypeAlreadyExists();\n        if (bytes(subdomainToCredentialType[subdomain]).length > 0)\n            revert SubdomainAlreadyExists();\n\n        // Create ENS subdomain\n        bytes32 label = keccak256(bytes(subdomain));\n        bytes32 subdomainNode = keccak256(abi.encodePacked(PARENT_NODE, label));\n\n        // Check if subdomain already exists in ENS\n        if (ENS_REGISTRY.owner(subdomainNode) != address(0)) {\n            revert SubdomainAlreadyExists();\n        }\n\n        // Create the subdomain and assign it to the issuer\n        ENS_REGISTRY.setSubnodeOwner(PARENT_NODE, label, msg.sender);\n\n        // Store credential type\n        credentials[credentialType] = Credential({\n            issuer: msg.sender,\n            description: description,\n            subdomain: subdomain,\n            exists: true\n        });\n\n        subdomainToCredentialType[subdomain] = credentialType;\n\n        emit SubdomainCreated(subdomainNode, subdomain, msg.sender);\n        emit CredentialTypeCreated(\n            credentialType,\n            subdomain,\n            msg.sender,\n            description\n        );\n    }\n\n    /// @notice Register a DID mapping to an Ethereum address\n    function registerDID(\n        string calldata did,\n        address expectedEthOwner,\n        bytes calldata sig\n    ) external {\n        if (bytes(did).length == 0) revert EmptyDID();\n\n        bytes32 d = didHash(did);\n        if (isRegistered[d]) revert DIDAlreadyRegistered();\n\n        // Verify signature: keccak256(abi.encodePacked(\"Register\", did, address(this)))\n        bytes32 message = keccak256(\n            abi.encodePacked(\"Register\", did, address(this))\n        );\n        address signer = recoverEthSignedMessage(message, sig);\n        if (signer != expectedEthOwner) revert Unauthorized();\n\n        // Register\n        ethOwnerOf[d] = expectedEthOwner;\n        isRegistered[d] = true;\n\n        emit DIDRegistered(d, did, expectedEthOwner);\n    }\n\n    /// @notice Issue a claim for a DID (only credential issuer can do this)\n    function issueClaim(\n        string calldata did,\n        string calldata cid,\n        string calldata credentialType,\n        bytes calldata sig\n    ) external {\n        if (bytes(did).length == 0) revert EmptyDID();\n        if (bytes(cid).length == 0) revert EmptyCID();\n        if (bytes(credentialType).length == 0) revert EmptyCredentialType();\n\n        bytes32 d = didHash(did);\n        address didOwner = ethOwnerOf[d];\n        if (didOwner == address(0) || !isRegistered[d])\n            revert DIDNotRegistered();\n\n        Credential memory cred = credentials[credentialType];\n        if (!cred.exists) revert CredentialTypeNotExists();\n        if (msg.sender != cred.issuer) revert Unauthorized(); // Only issuer can issue claims\n\n        // Verify signature from DID owner\n        bytes32 message = keccak256(\n            abi.encodePacked(\n                \"IssueClaim\",\n                did,\n                cid,\n                credentialType,\n                address(this)\n            )\n        );\n        address signer = recoverEthSignedMessage(message, sig);\n        if (signer != didOwner) revert Unauthorized();\n\n        // Store the claim\n        latestClaim[d][credentialType] = cid;\n\n        emit ClaimIssued(d, did, cid, credentialType, msg.sender);\n    }\n\n    /// @notice Get claim for a DID and credential type\n    function getClaim(\n        string calldata did,\n        string calldata credentialType\n    ) external view returns (string memory) {\n        return latestClaim[didHash(did)][credentialType];\n    }\n\n    /// @notice Check if credential type exists\n    function credentialExists(\n        string calldata credentialType\n    ) external view returns (bool) {\n        return credentials[credentialType].exists;\n    }\n\n    /// @notice Check if DID is registered\n    function isDIDRegistered(string calldata did) external view returns (bool) {\n        return isRegistered[didHash(did)];\n    }\n\n    /// @notice Get credential type by subdomain\n    function getCredentialTypeBySubdomain(\n        string calldata subdomain\n    ) external view returns (string memory) {\n        return subdomainToCredentialType[subdomain];\n    }\n\n    /// @notice Update contract owner\n    function updateOwner(address newOwner) external onlyOwner {\n        owner = newOwner;\n    }\n\n    // ---------- Signature verification helpers ----------\n    function recoverEthSignedMessage(\n        bytes32 hash,\n        bytes memory sig\n    ) internal pure returns (address) {\n        bytes32 ethHash = keccak256(\n            abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash)\n        );\n        (uint8 v, bytes32 r, bytes32 s) = splitSignature(sig);\n        return ecrecover(ethHash, v, r, s);\n    }\n\n    function splitSignature(\n        bytes memory sig\n    ) internal pure returns (uint8, bytes32, bytes32) {\n        require(sig.length == 65, \"invalid sig length\");\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n        assembly {\n            r := mload(add(sig, 32))\n            s := mload(add(sig, 64))\n            v := byte(0, mload(add(sig, 96)))\n        }\n        return (v, r, s);\n    }\n}\n"
      }
    }
  }
}