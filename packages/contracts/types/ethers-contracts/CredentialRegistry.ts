/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BytesLike, FunctionFragment, Result, Interface, EventFragment, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers"
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "./common.js"
  

  export interface CredentialRegistryInterface extends Interface {
    getFunction(nameOrSignature: "createCredential" | "credentialExists" | "credentials" | "didHash" | "ethOwnerOf" | "getClaim" | "getCurrentNonce" | "isDIDRegistered" | "isRegistered" | "issueClaim" | "latestClaim" | "nonces" | "registerDID"): FunctionFragment;

    getEvent(nameOrSignatureOrTopic: "ClaimIssued" | "CredentialTypeCreated" | "DIDRegistered"): EventFragment;

    encodeFunctionData(functionFragment: 'createCredential', values: [string, string]): string;
encodeFunctionData(functionFragment: 'credentialExists', values: [string]): string;
encodeFunctionData(functionFragment: 'credentials', values: [string]): string;
encodeFunctionData(functionFragment: 'didHash', values: [string]): string;
encodeFunctionData(functionFragment: 'ethOwnerOf', values: [BytesLike]): string;
encodeFunctionData(functionFragment: 'getClaim', values: [string, string]): string;
encodeFunctionData(functionFragment: 'getCurrentNonce', values: [string]): string;
encodeFunctionData(functionFragment: 'isDIDRegistered', values: [string]): string;
encodeFunctionData(functionFragment: 'isRegistered', values: [BytesLike]): string;
encodeFunctionData(functionFragment: 'issueClaim', values: [string, string, string, BytesLike]): string;
encodeFunctionData(functionFragment: 'latestClaim', values: [BytesLike, string]): string;
encodeFunctionData(functionFragment: 'nonces', values: [BytesLike]): string;
encodeFunctionData(functionFragment: 'registerDID', values: [string, AddressLike, BytesLike]): string;

    decodeFunctionResult(functionFragment: 'createCredential', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'credentialExists', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'credentials', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'didHash', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'ethOwnerOf', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getClaim', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getCurrentNonce', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'isDIDRegistered', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'isRegistered', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'issueClaim', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'latestClaim', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'nonces', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'registerDID', data: BytesLike): Result;
  }

  
    export namespace ClaimIssuedEvent {
      export type InputTuple = [didHash: BytesLike, did: string, cid: string, credentialType: string, submitter: AddressLike];
      export type OutputTuple = [didHash: string, did: string, cid: string, credentialType: string, submitter: string];
      export interface OutputObject {didHash: string, did: string, cid: string, credentialType: string, submitter: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace CredentialTypeCreatedEvent {
      export type InputTuple = [credentialType: string, issuer: AddressLike, description: string];
      export type OutputTuple = [credentialType: string, issuer: string, description: string];
      export interface OutputObject {credentialType: string, issuer: string, description: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace DIDRegisteredEvent {
      export type InputTuple = [didHash: BytesLike, did: string, ethOwner: AddressLike];
      export type OutputTuple = [didHash: string, did: string, ethOwner: string];
      export interface OutputObject {didHash: string, did: string, ethOwner: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

  export interface CredentialRegistry extends BaseContract {
    
    connect(runner?: ContractRunner | null): CredentialRegistry;
    waitForDeployment(): Promise<this>;

    interface: CredentialRegistryInterface;

    
  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>
  
  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>


    
    
    createCredential: TypedContractMethod<
      [credentialName: string, description: string, ],
      [void],
      'nonpayable'
    >
    

    
    credentialExists: TypedContractMethod<
      [credentialType: string, ],
      [boolean],
      'view'
    >
    

    
    credentials: TypedContractMethod<
      [arg0: string, ],
      [[string, string, boolean] & {issuer: string, description: string, exists: boolean }],
      'view'
    >
    

    
    didHash: TypedContractMethod<
      [did: string, ],
      [string],
      'view'
    >
    

    
    ethOwnerOf: TypedContractMethod<
      [arg0: BytesLike, ],
      [string],
      'view'
    >
    

    
    getClaim: TypedContractMethod<
      [did: string, credentialType: string, ],
      [string],
      'view'
    >
    

    
    getCurrentNonce: TypedContractMethod<
      [did: string, ],
      [bigint],
      'view'
    >
    

    
    isDIDRegistered: TypedContractMethod<
      [did: string, ],
      [boolean],
      'view'
    >
    

    
    isRegistered: TypedContractMethod<
      [arg0: BytesLike, ],
      [boolean],
      'view'
    >
    

    
    issueClaim: TypedContractMethod<
      [did: string, cid: string, credentialType: string, sig: BytesLike, ],
      [void],
      'nonpayable'
    >
    

    
    latestClaim: TypedContractMethod<
      [arg0: BytesLike, arg1: string, ],
      [string],
      'view'
    >
    

    
    nonces: TypedContractMethod<
      [arg0: BytesLike, ],
      [bigint],
      'view'
    >
    

    
    registerDID: TypedContractMethod<
      [did: string, expectedEthOwner: AddressLike, sig: BytesLike, ],
      [void],
      'nonpayable'
    >
    


    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

    getFunction(nameOrSignature: 'createCredential'): TypedContractMethod<
      [credentialName: string, description: string, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'credentialExists'): TypedContractMethod<
      [credentialType: string, ],
      [boolean],
      'view'
    >;
getFunction(nameOrSignature: 'credentials'): TypedContractMethod<
      [arg0: string, ],
      [[string, string, boolean] & {issuer: string, description: string, exists: boolean }],
      'view'
    >;
getFunction(nameOrSignature: 'didHash'): TypedContractMethod<
      [did: string, ],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'ethOwnerOf'): TypedContractMethod<
      [arg0: BytesLike, ],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'getClaim'): TypedContractMethod<
      [did: string, credentialType: string, ],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'getCurrentNonce'): TypedContractMethod<
      [did: string, ],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'isDIDRegistered'): TypedContractMethod<
      [did: string, ],
      [boolean],
      'view'
    >;
getFunction(nameOrSignature: 'isRegistered'): TypedContractMethod<
      [arg0: BytesLike, ],
      [boolean],
      'view'
    >;
getFunction(nameOrSignature: 'issueClaim'): TypedContractMethod<
      [did: string, cid: string, credentialType: string, sig: BytesLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'latestClaim'): TypedContractMethod<
      [arg0: BytesLike, arg1: string, ],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'nonces'): TypedContractMethod<
      [arg0: BytesLike, ],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'registerDID'): TypedContractMethod<
      [did: string, expectedEthOwner: AddressLike, sig: BytesLike, ],
      [void],
      'nonpayable'
    >;

    getEvent(key: 'ClaimIssued'): TypedContractEvent<ClaimIssuedEvent.InputTuple, ClaimIssuedEvent.OutputTuple, ClaimIssuedEvent.OutputObject>;
getEvent(key: 'CredentialTypeCreated'): TypedContractEvent<CredentialTypeCreatedEvent.InputTuple, CredentialTypeCreatedEvent.OutputTuple, CredentialTypeCreatedEvent.OutputObject>;
getEvent(key: 'DIDRegistered'): TypedContractEvent<DIDRegisteredEvent.InputTuple, DIDRegisteredEvent.OutputTuple, DIDRegisteredEvent.OutputObject>;

    filters: {
      
      'ClaimIssued(bytes32,string,string,string,address)': TypedContractEvent<ClaimIssuedEvent.InputTuple, ClaimIssuedEvent.OutputTuple, ClaimIssuedEvent.OutputObject>;
      ClaimIssued: TypedContractEvent<ClaimIssuedEvent.InputTuple, ClaimIssuedEvent.OutputTuple, ClaimIssuedEvent.OutputObject>;
    

      'CredentialTypeCreated(string,address,string)': TypedContractEvent<CredentialTypeCreatedEvent.InputTuple, CredentialTypeCreatedEvent.OutputTuple, CredentialTypeCreatedEvent.OutputObject>;
      CredentialTypeCreated: TypedContractEvent<CredentialTypeCreatedEvent.InputTuple, CredentialTypeCreatedEvent.OutputTuple, CredentialTypeCreatedEvent.OutputObject>;
    

      'DIDRegistered(bytes32,string,address)': TypedContractEvent<DIDRegisteredEvent.InputTuple, DIDRegisteredEvent.OutputTuple, DIDRegisteredEvent.OutputObject>;
      DIDRegistered: TypedContractEvent<DIDRegisteredEvent.InputTuple, DIDRegisteredEvent.OutputTuple, DIDRegisteredEvent.OutputObject>;
    
    };
  }