/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BytesLike, FunctionFragment, Result, Interface, EventFragment, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers"
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "../common.js"
  

  export interface ProofOfMeInterface extends Interface {
    getFunction(nameOrSignature: "CHAIN_ID" | "ENS_REGISTRY" | "FILECOIN_CONTRACT" | "PROOFOFME_KEY" | "generateClaimMessage" | "generateRegistrationMessage" | "getDID" | "getNamehash" | "getNonce" | "hasDID" | "incrementNonce" | "nonces" | "registerDID"): FunctionFragment;

    getEvent(nameOrSignatureOrTopic: "ClaimMessageGenerated" | "DIDClaimed"): EventFragment;

    encodeFunctionData(functionFragment: 'CHAIN_ID', values?: undefined): string;
encodeFunctionData(functionFragment: 'ENS_REGISTRY', values?: undefined): string;
encodeFunctionData(functionFragment: 'FILECOIN_CONTRACT', values?: undefined): string;
encodeFunctionData(functionFragment: 'PROOFOFME_KEY', values?: undefined): string;
encodeFunctionData(functionFragment: 'generateClaimMessage', values: [string, string, string]): string;
encodeFunctionData(functionFragment: 'generateRegistrationMessage', values: [string]): string;
encodeFunctionData(functionFragment: 'getDID', values: [string]): string;
encodeFunctionData(functionFragment: 'getNamehash', values: [string]): string;
encodeFunctionData(functionFragment: 'getNonce', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'hasDID', values: [string]): string;
encodeFunctionData(functionFragment: 'incrementNonce', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'nonces', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'registerDID', values: [string]): string;

    decodeFunctionResult(functionFragment: 'CHAIN_ID', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'ENS_REGISTRY', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'FILECOIN_CONTRACT', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'PROOFOFME_KEY', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'generateClaimMessage', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'generateRegistrationMessage', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getDID', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getNamehash', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getNonce', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'hasDID', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'incrementNonce', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'nonces', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'registerDID', data: BytesLike): Result;
  }

  
    export namespace ClaimMessageGeneratedEvent {
      export type InputTuple = [node: BytesLike, ensName: string, messageHash: BytesLike, claimer: AddressLike];
      export type OutputTuple = [node: string, ensName: string, messageHash: string, claimer: string];
      export interface OutputObject {node: string, ensName: string, messageHash: string, claimer: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace DIDClaimedEvent {
      export type InputTuple = [node: BytesLike, ensName: string, didRecord: string, claimer: AddressLike];
      export type OutputTuple = [node: string, ensName: string, didRecord: string, claimer: string];
      export interface OutputObject {node: string, ensName: string, didRecord: string, claimer: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

  export interface ProofOfMe extends BaseContract {
    
    connect(runner?: ContractRunner | null): ProofOfMe;
    waitForDeployment(): Promise<this>;

    interface: ProofOfMeInterface;

    
  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>
  
  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>


    
    
    CHAIN_ID: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    ENS_REGISTRY: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    FILECOIN_CONTRACT: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    PROOFOFME_KEY: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    generateClaimMessage: TypedContractMethod<
      [ensName: string, cid: string, credentialName: string, ],
      [string],
      'view'
    >
    

    
    generateRegistrationMessage: TypedContractMethod<
      [ensName: string, ],
      [string],
      'view'
    >
    

    
    getDID: TypedContractMethod<
      [ensName: string, ],
      [string],
      'view'
    >
    

    
    getNamehash: TypedContractMethod<
      [name: string, ],
      [string],
      'view'
    >
    

    
    getNonce: TypedContractMethod<
      [user: AddressLike, ],
      [bigint],
      'view'
    >
    

    
    hasDID: TypedContractMethod<
      [ensName: string, ],
      [boolean],
      'view'
    >
    

    
    incrementNonce: TypedContractMethod<
      [user: AddressLike, ],
      [void],
      'nonpayable'
    >
    

    
    nonces: TypedContractMethod<
      [arg0: AddressLike, ],
      [bigint],
      'view'
    >
    

    
    registerDID: TypedContractMethod<
      [ensName: string, ],
      [void],
      'nonpayable'
    >
    


    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

    getFunction(nameOrSignature: 'CHAIN_ID'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'ENS_REGISTRY'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'FILECOIN_CONTRACT'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'PROOFOFME_KEY'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'generateClaimMessage'): TypedContractMethod<
      [ensName: string, cid: string, credentialName: string, ],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'generateRegistrationMessage'): TypedContractMethod<
      [ensName: string, ],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'getDID'): TypedContractMethod<
      [ensName: string, ],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'getNamehash'): TypedContractMethod<
      [name: string, ],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'getNonce'): TypedContractMethod<
      [user: AddressLike, ],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'hasDID'): TypedContractMethod<
      [ensName: string, ],
      [boolean],
      'view'
    >;
getFunction(nameOrSignature: 'incrementNonce'): TypedContractMethod<
      [user: AddressLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'nonces'): TypedContractMethod<
      [arg0: AddressLike, ],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'registerDID'): TypedContractMethod<
      [ensName: string, ],
      [void],
      'nonpayable'
    >;

    getEvent(key: 'ClaimMessageGenerated'): TypedContractEvent<ClaimMessageGeneratedEvent.InputTuple, ClaimMessageGeneratedEvent.OutputTuple, ClaimMessageGeneratedEvent.OutputObject>;
getEvent(key: 'DIDClaimed'): TypedContractEvent<DIDClaimedEvent.InputTuple, DIDClaimedEvent.OutputTuple, DIDClaimedEvent.OutputObject>;

    filters: {
      
      'ClaimMessageGenerated(bytes32,string,bytes32,address)': TypedContractEvent<ClaimMessageGeneratedEvent.InputTuple, ClaimMessageGeneratedEvent.OutputTuple, ClaimMessageGeneratedEvent.OutputObject>;
      ClaimMessageGenerated: TypedContractEvent<ClaimMessageGeneratedEvent.InputTuple, ClaimMessageGeneratedEvent.OutputTuple, ClaimMessageGeneratedEvent.OutputObject>;
    

      'DIDClaimed(bytes32,string,string,address)': TypedContractEvent<DIDClaimedEvent.InputTuple, DIDClaimedEvent.OutputTuple, DIDClaimedEvent.OutputObject>;
      DIDClaimed: TypedContractEvent<DIDClaimedEvent.InputTuple, DIDClaimedEvent.OutputTuple, DIDClaimedEvent.OutputObject>;
    
    };
  }